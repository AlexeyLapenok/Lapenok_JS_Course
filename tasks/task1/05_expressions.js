// Выражения и операторы. Преобразование типов.

// Записать в коротком виде:
// let a = a + 5;
// a += 5;
// let b = b * 15;
// b *= 15;
// let c = c - 3;
// c -= 3;
// let d = d % 2;
// d %= 2;
// let k = a + k;
// k += a;
// let l = l * b;
// l *= b;
// let m = m * 3 * k;
// m *= 3 * k;

// Возвести переменную в куб, используя краткую запись.
let variableCube;
variableCube **= 3;
console.log(variableCube);

// Если переменная равна “маленький”, присвоить ей значение “большой”,
//  иначе “маленький”. Сделать тоже самое, используя тернарный оператор.
let littleBig;
if (littleBig === 'маленький') {
    littleBig = 'большой';
} else {
    littleBig = 'маленький';
}
console.log(littleBig);

// Тернарный оператор:
littleBig === 'маленький' ?
    littleBig = 'большой' :
    littleBig = 'маленький';
console.log(littleBig);

// Записать условие, используя условный оператор if: если переменная меньше нуля: 
// присвоить ей строку “меньше нуля” если переменная равна нулю: присвоить 1
// если больше нуля: используя краткую запись, умножить переменную на 10 
// Сделать тоже самое, используя тернарный оператор.
let simpleVar;
if (simpleVar < 0) {
    simpleVar = 'меньше нуля';
} else if (simpleVar == 0) {
    simpleVar = 1;
} else {
    simpleVar *= 10;
}
console.log(simpleVar);

// Тернарный оператор:
simpleVar == 0 ?
    simpleVar = 1 :
    simpleVar < 0 ?
        simpleVar = 'меньше нуля' :
        simpleVar *= 10;
console.log(simpleVar);

// Используя конструктор switch, записать следующее условие:
// if (a == 'котик') {
//     console.log('котик');
// } else if (a == 'собака') {
//     console.log('собака');
// } else if (a == 'хомячок') {
//     console.log('хомячок');
// } else {
//     console.log('неизвестное науке животное');
// }
// Важно: в консоли вы должны увидеть только одно условие из 4х.
let a;
switch (a) {
    case 'котик':
        console.log('котик');
        break;
    case 'собака':
        console.log('собака');
        break;
    case 'хомячок':
        console.log('хомячок');
        break;
    default:
        console.log('неизвестное науке животное');
}

/*Чему равен x в каждом из примеров, объясните почему:
let x = 0 || 'строка';
x = строка
операнд два имеет первое значение true

let x = 1 && 'строка';
x = строка
операнд 2 имеет последнее значение true, нет значения false

let x = null || 1;
x = 1
первое значение true имеет операнд 2

let x = null && 1;
x = null
первое значение false имеет операнд 1

let x = 1 && null;
x = null;
первое значение false имеет операнд 2

let x = null || 0 || 1;
x = 1
первое значение true имеет операнд 3

let x = null && 0 && 1;
x = null
первое значение false имеет операнд 1


Чему равен x в каждом из примеров, объясните почему:
let x = 1 + 2 + '4';
x = 33
Строки конкатенируются с числами : число 3 + строка 3

let x = 1 + 2 - '1';
x = 2
Для строк есть только оператор сложения, используя другие операторы
- строки приводятся к числу

let x = '1' + 2 - 1;
x = 11
Строки конкатенируются с числами : число 1 + строка 1

let x = true + 1;
x = 1
Конкатенация только со строками всё остальное приводит к числу

let x = +'1' + 2;
x = 3
Строка приводится к числу


let x = null + 2;
x = 2
0 + 2

let x = undefined + 2;
x = NaN
Не может привести к числу

let x = true + undefined;
x = NaN
Не может привести к числу

*/
